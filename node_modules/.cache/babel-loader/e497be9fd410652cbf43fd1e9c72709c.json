{"ast":null,"code":"var _jsxFileName = \"/Users/samir/Documents/A-Level/Computer Science A-Level/Coursework/Project/Initial Testing/test2/src/components/MyAreaChart.js\";\n// importing react\nimport React, { useState, useEffect } from \"react\"; // importing json sales data\n\nimport MyData from \"../Data/MyData.json\"; // importing moment for formatting dates\n\nimport moment from \"moment\"; // importing modules needed from recharts package\n\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Label } from \"recharts\"; // import { response } from \"express\";\n\nconst axios = require(\"axios\"); // sets data value to sale data part of json file\n\n\nvar data = MyData[\"ProductActivity\"]; // url for my API endpoint\n\nconst url = \"http://localhost:5000/api/stockx\"; // code for area graph component with recharts module\n\nexport const MyAreaChart = props => {\n  // db hook initialised\n  const [db, setDb] = React.useState([]); // url for my API endpoint\n\n  const url = \"http://localhost:5000/api/stockx\"; // this code sets the db hook to data from my api\n\n  useEffect(() => {\n    axios.get(url).then(res => {\n      setDb(res.data.express);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // sets the data to be displayed as data from the API\n\n  var data = db; // This just formats all the dates from the file from ISO format to YYYY-MM-DD format which makes it easier to read for the user\n\n  function formatdate() {\n    moment().format();\n\n    for (var i = 0; i < data.length; i++) {\n      data[i].ProductActivity__createdAt = moment(data[i].ProductActivity__createdAt).format(\"YYYY-MM-DD\");\n    }\n  } // this code sorts data so that it is in the correct order of dates\n\n\n  data.sort(function compare(a, b) {\n    var dateA = new Date(a.ProductActivity__createdAt);\n    var dateB = new Date(b.ProductActivity__createdAt);\n    return dateA - dateB;\n  }); // this function returns an array of sales up to the date that is passed as a paramater\n\n  function filterdate(date) {\n    var filtered2 = [];\n    var datetofilter = new Date(date);\n    datetofilter = datetofilter.getTime();\n\n    for (var i = 0; i < data.length; i++) {\n      var comparisondate = new Date(data[i].ProductActivity__createdAt);\n\n      if (comparisondate.getTime() < datetofilter) {\n        filtered2.push(data[i]);\n      }\n    }\n\n    return filtered2;\n  } // this function returns an array of sales after filtering by the two paramaters\n\n\n  function filterbydateandsize(size, date) {\n    var filtered = [];\n    var datetofilter = new Date(date);\n    datetofilter = datetofilter.getTime();\n\n    for (var i = 0; i < data.length; i++) {\n      var comparisondate = new Date(data[i].ProductActivity__createdAt);\n\n      if (data[i][\"ProductActivity__shoeSize\"] == size && comparisondate.getTime() < datetofilter) {\n        filtered.push(data[i]);\n      } else if (size == 0 && comparisondate.getTime() < datetofilter) {\n        filtered = filterdate(date);\n      }\n    }\n\n    return filtered;\n  } // sets data to data filtered by the filtered component\n\n\n  data = filterbydateandsize(props.size, props.date);\n  formatdate();\n  console.log(\"Data being displayed:\", data);\n  return (\n    /*#__PURE__*/\n    // settings for the position and size of graph\n    React.createElement(AreaChart, {\n      width: 900,\n      height: 800,\n      data: data,\n      margin: {\n        top: 30,\n        right: 30,\n        left: 30,\n        bottom: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"ProductActivity__createdAt\",\n      label: {\n        value: \"Date Of Sale\",\n        dy: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      label: {\n        value: \"Price (Â£)\",\n        position: \"insideLeft\",\n        angle: -90,\n        dy: -10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"ProductActivity__localAmount\",\n      stroke: \"#8884d8\",\n      fill: \"#8884d8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }))\n  );\n};\nexport default MyAreaChart;","map":{"version":3,"sources":["/Users/samir/Documents/A-Level/Computer Science A-Level/Coursework/Project/Initial Testing/test2/src/components/MyAreaChart.js"],"names":["React","useState","useEffect","MyData","moment","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","Label","axios","require","data","url","MyAreaChart","props","db","setDb","get","then","res","express","catch","err","console","log","formatdate","format","i","length","ProductActivity__createdAt","sort","compare","a","b","dateA","Date","dateB","filterdate","date","filtered2","datetofilter","getTime","comparisondate","push","filterbydateandsize","size","filtered","top","right","left","bottom","value","dy","position","angle"],"mappings":"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","sourcesContent":["// importing react\nimport React, { useState, useEffect } from \"react\";\n// importing json sales data\nimport MyData from \"../Data/MyData.json\";\n// importing moment for formatting dates\nimport moment from \"moment\";\n// importing modules needed from recharts package\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Label,\n} from \"recharts\";\n// import { response } from \"express\";\n\nconst axios = require(\"axios\");\n\n// sets data value to sale data part of json file\nvar data = MyData[\"ProductActivity\"];\n\n// url for my API endpoint\nconst url = \"http://localhost:5000/api/stockx\";\n\n// code for area graph component with recharts module\nexport const MyAreaChart = (props) => {\n  // db hook initialised\n  const [db, setDb] = React.useState([]);\n\n  // url for my API endpoint\n  const url = \"http://localhost:5000/api/stockx\";\n\n  // this code sets the db hook to data from my api\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((res) => {\n        setDb(res.data.express);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  // sets the data to be displayed as data from the API\n  var data = db;\n\n  // This just formats all the dates from the file from ISO format to YYYY-MM-DD format which makes it easier to read for the user\n  function formatdate() {\n    moment().format();\n    for (var i = 0; i < data.length; i++) {\n      data[i].ProductActivity__createdAt = moment(\n        data[i].ProductActivity__createdAt\n      ).format(\"YYYY-MM-DD\");\n    }\n  }\n\n  // this code sorts data so that it is in the correct order of dates\n  data.sort(function compare(a, b) {\n    var dateA = new Date(a.ProductActivity__createdAt);\n    var dateB = new Date(b.ProductActivity__createdAt);\n    return dateA - dateB;\n  });\n\n  // this function returns an array of sales up to the date that is passed as a paramater\n  function filterdate(date) {\n    var filtered2 = [];\n    var datetofilter = new Date(date);\n    datetofilter = datetofilter.getTime();\n    for (var i = 0; i < data.length; i++) {\n      var comparisondate = new Date(data[i].ProductActivity__createdAt);\n      if (comparisondate.getTime() < datetofilter) {\n        filtered2.push(data[i]);\n      }\n    }\n    return filtered2;\n  }\n  // this function returns an array of sales after filtering by the two paramaters\n  function filterbydateandsize(size, date) {\n    var filtered = [];\n    var datetofilter = new Date(date);\n    datetofilter = datetofilter.getTime();\n    for (var i = 0; i < data.length; i++) {\n      var comparisondate = new Date(data[i].ProductActivity__createdAt);\n      if (\n        data[i][\"ProductActivity__shoeSize\"] == size &&\n        comparisondate.getTime() < datetofilter\n      ) {\n        filtered.push(data[i]);\n      } else if (size == 0 && comparisondate.getTime() < datetofilter) {\n        filtered = filterdate(date);\n      }\n    }\n    return filtered;\n  }\n  // sets data to data filtered by the filtered component\n  data = filterbydateandsize(props.size, props.date);\n\n  formatdate();\n\n  console.log(\"Data being displayed:\", data);\n\n  return (\n    // settings for the position and size of graph\n    <AreaChart\n      width={900}\n      height={800}\n      data={data}\n      margin={{\n        top: 30,\n        right: 30,\n        left: 30,\n        bottom: 30,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      {/* settings for x axis */}\n      <XAxis\n        dataKey=\"ProductActivity__createdAt\"\n        label={{ value: \"Date Of Sale\", dy: 20 }}\n      />\n      {/* settings for y axis */}\n      <YAxis\n        label={{\n          value: \"Price (Â£)\",\n          position: \"insideLeft\",\n          angle: -90,\n          dy: -10,\n        }}\n      />\n      <Tooltip />\n      {/* settings for area under line */}\n      <Area\n        type=\"monotone\"\n        dataKey=\"ProductActivity__localAmount\"\n        stroke=\"#8884d8\"\n        fill=\"#8884d8\"\n      />\n    </AreaChart>\n  );\n};\n\nexport default MyAreaChart;\n"]},"metadata":{},"sourceType":"module"}